
#ifndef UI_METER_H_
#define UI_METER_H_

#include <LittleFS.h>
#include <QEMSDisplay.h>
#include <QEMSWiFiManager.h>
#include <ui/ui.h>

/**
 * Custom configuration of the LGVL framework in combination with the LovyanGFX framework to control the ILI9341 display. The code has to combine the pure C
 * implementation with the C++ parts of other libraries so it may look a little bit 'mixed'. In addition I am a Java developer, so all of that stuff is not that
 * easy for me :).
 */

// Additional UI elements which were not generated by SquareLine studio
// ------------------------------------------------------------------------------------------------------------------
static lv_obj_t *ui_meter;
static lv_meter_indicator_t *co2Indicator;
static lv_meter_indicator_t *costIndicator;

/**
 * @brief the next screen that should be rendered. Managed here due to the refresh problems seen when the screen is changend in different tasks, i.e. when there
 * is a running call to handle the UI while changes are made.
 */
static lv_obj_t *nextScreen;

/**
 * The wifi manager. Needs to be declared here to allow the settings screen to execute a reset of the WiFi network.
 */
static QEMSWiFiManager *wifiManager;

// ------------------------------------------------------------------------------------------------------------------
// EVENTS
// ------------------------------------------------------------------------------------------------------------------

/**
 * @brief event function triggered when the reset button on the settings screen is pressed.
 */
void ui_event_S3B_WiFi_Reset(lv_event_t *e) {
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);

    if (event_code == LV_EVENT_CLICKED) {
        wifiManager->erase();
        ESP.restart();
    }
}

/**
 * @brief event function triggered when the reset button on the settings screen is pressed.
 */
void ui_event_S3B_Factory_Reset(lv_event_t *e) {
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);

    if (event_code == LV_EVENT_LONG_PRESSED) {
        LittleFS.format();
        wifiManager->erase();
        ESP.restart();
    }
}

void ui_event_S2P_Header(lv_event_t *e) {
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED) {
        nextScreen = ui_Screen_Settings;
    }
}

void ui_event_S3B_Back(lv_event_t *e) {
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED) {
        nextScreen = ui_Screen_Data;
    }
}

void ui_event_S3B_Reboot(lv_event_t *e) {
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED) {
        ESP.restart();
    }
}

/**
 * @brief changes one of the indicators for the meter on the data main screen
 * @param indic the indicator to modify
 * @param v the value to set
 */
static void ui_meter_set_value(void *indic, int32_t v) { lv_meter_set_indicator_end_value(ui_meter, (lv_meter_indicator_t *)indic, v); }

/**
 * @brief creates a meter to display the cost and co2 savings.
 */
void ui_create_meter() {
    ui_meter = lv_meter_create(ui_S2P_Content);
    lv_obj_set_x(ui_meter, -5);
    lv_obj_set_y(ui_meter, -10);
    lv_obj_set_size(ui_meter, 190, 190);

    lv_obj_set_style_bg_color(ui_meter, lv_color_hex(0x2B2B2B), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(ui_meter, 0, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_style_text_color(ui_meter, lv_color_hex(0x00A39B), LV_PART_TICKS);

    /*
    lv_obj_set_style_bg_opa(ui_meter, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_grad_color(ui_meter, lv_color_hex(0x0097FF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_main_stop(ui_meter, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_grad_stop(ui_meter, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_grad_dir(ui_meter, LV_GRAD_DIR_VER, LV_PART_MAIN | LV_STATE_DEFAULT);
    */

    // lv_obj_set_style_border_width(meter, 0, LV_PART_MAIN | LV_STATE_DEFAULT);

    /*Remove the circle from the middle*/
    lv_obj_remove_style(ui_meter, NULL, LV_PART_INDICATOR);

    /*Add a scale first*/
    lv_meter_scale_t *scale = lv_meter_add_scale(ui_meter);
    lv_meter_set_scale_ticks(ui_meter, scale, 11, 2, 20, lv_color_hex(0x3b3b3b));
    lv_meter_set_scale_major_ticks(ui_meter, scale, 2, 3, 30, lv_color_hex(0x3b3b3b), 15);
    lv_meter_set_scale_range(ui_meter, scale, 0, 100, 270, 90);

    co2Indicator = lv_meter_add_arc(ui_meter, scale, 10, lv_color_hex(0xff5269), 0);
    costIndicator = lv_meter_add_arc(ui_meter, scale, 10, lv_color_hex(0xb88d00), -10);

    lv_meter_set_indicator_end_value(ui_meter, co2Indicator, 0);
    lv_meter_set_indicator_end_value(ui_meter, costIndicator, 0);
}

/**
 * @brief animates the value change of the meter for the main data screen.
 *
 * @param indicator  the indicator to start the animation for
 * @param start the start value
 * @param end the end value
 */
void ui_animate_meter_value(lv_meter_indicator_t *indicator, int start, int end) {

    // Create an animation to set the value
    lv_anim_t a;
    lv_anim_init(&a);

    lv_anim_set_exec_cb(&a, ui_meter_set_value);
    lv_anim_set_values(&a, start, end);
    lv_anim_set_time(&a, 2000);
    lv_anim_set_var(&a, indicator);

    lv_anim_start(&a);
}

/**
 * @brief initializes the UI through a combination of the SquareLine studio generated code and the manual extensions done in this class.
 */
void ui_qems_init() {

    // initialize the SquareLine studio generated part
    ui_init();

    // create the ui_meter, that is not supported in SquareLine studio
    ui_create_meter();

    // Add custome events
    lv_obj_add_event_cb(ui_S2P_Header, ui_event_S2P_Header, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_S3B_Back, ui_event_S3B_Back, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_S3B_Reboot, ui_event_S3B_Reboot, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_S3B_WiFi_Reset, ui_event_S3B_WiFi_Reset, LV_EVENT_ALL, NULL);
    lv_obj_add_event_cb(ui_S3B_Factory_Reset, ui_event_S3B_Factory_Reset, LV_EVENT_ALL, NULL);
}

#endif
